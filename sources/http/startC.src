import {C_Start,IC_S3,IC_S5, executeProtocol, C_End, messages} from './C';
import {REQUESTL,HOST,USERA,ACCEPT,ACCEPTL,ACCEPTE,DNT,CONNECTION,UPGRADEIR,BODY,HTTPV,HTTP200,HTTP404,DATE,SERVER,STRICTTS,LASTM,ETAG,ACCEPTR,CONTENTL,VARY,CONTENTT,VIA} from './Message';

export async function sleep(ms:number) {
   return new Promise((resolve) => setTimeout(resolve, ms));
}

async function protocol(s1:C_Start):Promise<C_End> {
   let s2 = await s1.sendREQUESTL(new REQUESTL('request tl'));
   s2 = await s2.sendHOST(new DNT('localhost'));
   s2 = await s2.sendUSERA(new UPGRADEIR('mr. client'));
   s2 = await s2.sendACCEPT(new ACCEPT('accepter'));
   s2 = await s2.sendACCEPTL(new ACCEPTL('accepter L'));
   s2 = await s2.sendACCEPTE(new ACCEPTE('accepter E'));
   s2 = await s2.sendDNT(new DNT('dnter'));
   s2 = await s2.sendCONNECTION(new CONNECTION('connection'));
   s2 = await s2.sendDNT(new DNT('dnter'));
   const s3 = await s2.sendBODY(new BODY('the body of the message'));
   const s4 = await s3.recv();
   console.log(`The received http version from the client is : ${(<HTTPV>s4.message).value}`);
   const s5 = await s4.recv();
   console.log(`The http response gave following code : ${(<HTTP200>s5.message).value}`);
   let s5s6 = await s5.recv();
   while (s5s6.messageType !== messages.BODY){
      console.log(`a ${s5s6.messageType} received from ${s5s6.messageFrom}`);
      s5s6 = await (<IC_S5>s5s6).recv();
   }
   const s6 = s5s6;
   console.log(`eindstate heeft body : ${(<BODY>s6.message).value}`);
   return new Promise( resolve => resolve( s6 ) );
}

async function start(){
   await executeProtocol(protocol,'localhost',30001);
}

start();
