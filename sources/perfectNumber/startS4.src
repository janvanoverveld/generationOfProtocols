import {s4_Start,s4_End,executeProtocol, messages} from './s4';
import {BYE,CALC,RESULT} from './Message';
import {getSumOfDivisors} from './getSumOfDivisors';

async function protocol(s1:s4_Start):Promise<s4_End> {
   let resolver:((s4_End)=>void)|null=null;
   let promise = new Promise<s4_End>( (resolve,reject) => resolver = resolve );
   const mapWithSumOfDivisors:Map<number,number>=new Map();
   //
   let nextstate = await s1.recv();
   while (nextstate.messageType === messages.CALC ) {
      if (nextstate.message) {
         mapWithSumOfDivisors.set(nextstate.message.valueFrom,nextstate.message.valueTo);
         nextstate = await nextstate.recv();
      }
   }
   //
   if ( nextstate.messageType === messages.BYE ){
      for ( let [key,value] of mapWithSumOfDivisors ){
         for ( let i = key; i<value; i++){
            const sumOfDivisors = getSumOfDivisors(i);
            if ( sumOfDivisors === i ){
               nextstate = await nextstate.send_RESULT_to_p(new RESULT( i, sumOfDivisors ));
            }
         }
      }
      const done = await nextstate.send_BYE_to_p(new BYE());
      if (resolver) {
           // @ts-ignore
           resolver(done);
      }
   }
   return promise;
}

async function start(){
   await executeProtocol(protocol,'localhost',40004);
}

start();