import {s6_Start,s6_End,Is6_S2,executeProtocol, messages} from './s6';
import {BYE,CALC,RESULT} from './Message';
import {getSumOfDivisors} from './getSumOfDivisors';

async function protocol(s1:s6_Start):Promise<s6_End> {
   let resolver:((s1_End)=>void)|null=null;
   let promise = new Promise<s6_End>( (resolve,reject) => resolver = resolve );
   const numberWithSumOfDivisors:Map<number,number>=new Map();
   //
   let nextstate = await s1.recv();
   while (nextstate.messageType === messages.CALC ) {
      if (nextstate.message) {
         numberWithSumOfDivisors.set(nextstate.message.value,getSumOfDivisors(nextstate.message.value));
         nextstate = await nextstate.recv();
      }
   }
   //
   if ( nextstate.messageType === messages.BYE ){
      let nextstate2:Is6_S2|null=null;
      for ( const key of numberWithSumOfDivisors.keys() ){
         const sumOfDivisors = numberWithSumOfDivisors.get(key);
         if ( sumOfDivisors ){
            const result = new RESULT( key, sumOfDivisors );
            if ( !nextstate2 )
               nextstate2 = await nextstate.send_RESULT_to_p(result);
            else nextstate2 = await nextstate2.send_RESULT_to_p(result);
         }
      }
      if (nextstate2){
         const done = await nextstate2.send_BYE_to_p(new BYE());
         if (resolver) {
            resolver = <((s6_End)=>void)> resolver;
            resolver(done);
         }
      }
   }
   return promise;
}

async function start(){
   await executeProtocol(protocol,'localhost',40006);
}

start();