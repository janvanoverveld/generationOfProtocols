import {p_Start,p_End,executeProtocol} from './p';
import {CALC,RESULT,BYE} from './Message';
import { messages } from './s1';

async function protocol(s1:p_Start):Promise<p_End> {
   let resolver:((p_End)=>void)|null=null;
   let promise = new Promise<p_End>( (resolve,reject) => resolver = resolve );
   let state0=s1;
   let cntr=1;
   const maxNumbers=10000;
   for(let i=0;i<maxNumbers;i++) {
      switch (cntr) {
         case 1: {
            state0 = await state0.send_CALC_to_s1(new CALC(i));
            break;
         }
         case 2: {
            state0 = await state0.send_CALC_to_s2(new CALC(i));
            break;
         }
         case 3: {
            state0 = await state0.send_CALC_to_s3(new CALC(i));
            break;
         }
         case 4: {
            state0 = await state0.send_CALC_to_s4(new CALC(i));
            break;
         }
         case 5: {
            state0 = await state0.send_CALC_to_s5(new CALC(i));
            break;
         }
      }
      ++cntr;
      if (cntr === 6) cntr = 1;
   }
   //
   let state1 = await state0.send_BYE_to_s1(new BYE());
   let state2 = await state1.send_BYE_to_s2(new BYE());
   let state3 = await state2.send_BYE_to_s3(new BYE());
   let state4 = await state3.send_BYE_to_s4(new BYE());
   let state5 = await state4.send_BYE_to_s5(new BYE());
   //
   let state6 = await state5.recv();
   while ( state6.messageType === messages.RESULT ) {
      if ( state6.message && state6.message.sumOfDivisors === state6.message.value )
         console.log(`perfect number ${state6.message.value}`);
      state6  = await state6.recv();
   }
   if ( state6.messageType === messages.BYE ) {
      let state7   = await state6.recv();
      let state8   = await state7.recv();
      let state9   = await state8.recv();
      const done   = await state9.recv();
      if ( resolver ) {
         resolver = <((p_End)=>void)>resolver;
         resolver(done);
      }
   }
   return promise;
}

async function start(){
   console.time("generated perfectNumber Timing");
   await executeProtocol(protocol,'localhost',30001);
   console.timeEnd("generated perfectNumber Timing");
}

start();